# Bootstrap and Jekyll: a guide for the perplexed

This tutorial will walk you through how to create and maintain a Jekyll site using Bootstrap. Some of this tutorial is an updated and revised version of [this blog post on experimentingwithcode.com][4], and the rest has been hacked together by me. I am not a web dev expert, so I _will explain everything in excruciating detail. If you are, this is going to be too much information. Sorry.

#### Overview
- [1. How to Jekyll 101](#1-how-to-jekyll-101)
- [2. Bootstrap me some style sheets](#2-bootstrap-me-some-stylesheets)
- [3. Javascript](#3-javascript)
- [4. Make it Jekyll](#4-make-it-jekyll)

## 1. How to Jekyll 101

### Installation

If you've never used Jekyll before it might be worth creating a Jekyll site using their [step by step tutorial][2] to familiarise yourself with the format.

On macOS, if you've installed the developer tools that come with Xcode you should already have Ruby, RubyGems, gcc and g++ on your machine. You will need at least Ruby version 2.5.0 to work with Jekyll. Check your version `ruby -v` and update if necessary.

An installation guide for different OS is available [on the Jekyll site][3].

### New site

Now that we're all set up with Jekyll we can create a new site directly from the terminal. I usually like to keep these things in the `documents` folder:

```
cd documents
jekyll new test-site
```

If you now navigate to the `test-site` directory you will see something like this:

```
â”œâ”€â”€ config.yml
â”œâ”€â”€ _posts
|   â”œâ”€â”€ ...
â”œâ”€â”€ 404.html
â”œâ”€â”€ about.markdown
â”œâ”€â”€ Gemfile
â”œâ”€â”€ Gemfile.lock
â””â”€â”€ index.markdown
```

> :tada: This is a fully functional Jekyll site.

In fact, you don't need to use bootstrap at all. If you're just looking to host a nice easy blog this might just be enough for you. Of course if you'd followed [the tutorial I linked to earlier][2] you would know this...

### What does it look like? ðŸ‘€

If you want to see what this looks like right now you can serve it. First, navigate to the root directory (`test-site` in my case), then run:

```
bundle install
bundle exec jekyll serve
```

The first command makes sure any dependencies stated in the Gemfile are taken care of. The second command will serve your site on `localhost:4000`. This is the url address you need to type into your browser to see the site.

This is all incidental though, because we're getting rid of all of it.

## 2. Bootstrap me some stylesheets

The default jekyll site above has the terrible flaw of being built on a theme, which will interfere with our plan to bootstrap it. So the first thing we need to do is get rid of all references to this theme.

The theme in question is `minima` and was installed on your computer when you got Jekyll. In fact, there is [a very cool guide][5] on bringing all the theme files into the root domain so you can modify them to your liking.

We're going to go a few steps further though, and get rid of `minima` all together.

### The big delete

You'll need to get rid of the `_posts` folder and the default post that comes with it, `404.html` and both `.markdown` pages.

Next we need to update the `config.yml` and `Gemfile` to no longer depend on `minima`.

This is what your `config.yml` file should look like:
```yml
# Site settings
title: My Very Cool Site
email: me@myverycool.site
author: beep boop I'm a human
description: Welcome to the tutorial site.
url: myverycool.site

# Build settings
permalink: :title/
```
The `permalink` command is optional, if you're not sure what it does do not include it. Leave `url` blank if you don't know where you're going to be hosting this page yet.

This is what your `Gemfile` should look like:
```Ruby
source "https://rubygems.org"

gem "jekyll"
gem "github-pages", group: :jekyll_plugins
```

If you're going to be hosting your page on [Github Pages][6] you **must** include the the second gem. Otherwise it doesn't really matter.

Now we need to update the bundle (rememer earlier I said something about Gemfiles making sure all your dependencies are up to date?). You can do this step even if you don't understand what's happening. Navigate to your site directory in the terminal and type `bundle update`. You should end up with a reassuring `bundle updated!` message. If you don't, double check that you have deleted and copied and pasted everything properly.

### Shiny new directories

You also need to add some directories for later use. This is what your site looks like now:

```
â”œâ”€â”€ config.yml
â”œâ”€â”€ Gemfile
â””â”€â”€ Gemfile.lock
```

We want to have an `assets` directory where we can keep all our precious bootstrap and custom bits and bobs. We also need an Index, to like, have a website.

A good top tip with these directory visualisations is that if it has a `.something` extension at the end it's a file, if it doesn't, it's a directory (or folder, they're the same thing.)

Now create files and directories until your site looks like this:

```
â”œâ”€â”€ config.yml
â”œâ”€â”€ Gemfile
â”œâ”€â”€ Gemfile.lock

ðŸ‘‡    new stuff    ðŸ‘‡

â”œâ”€â”€ assets
â”‚   â”œâ”€â”€ css
â”‚   â”‚   â”œâ”€â”€ bootstrap
â”‚   â”‚   â”œâ”€â”€ custom
â”‚   â”‚   â””â”€â”€ main.scss
â”‚   â””â”€â”€ js
â””â”€â”€ index.html
```

We'll also start with a very basic Index file. You can just copy and paste this into it. (PS this is totally a slightly modified version of [the one in that blogpost I've been linking over and over again][7])

```
<!DOCTYPE html>

<html>
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <meta http-equiv="X-UA-Compatible" content="ie=edge">
  <title>Cool Site</title>
</head>
<body>
  <div class="container">
    <div class="row">
      <div class="col">
        <h1 class="text-primary">Hello there!</h1>
        <p>Beep boop this is some totally relevant text.</p>
        <i class="fas fa-thumbs-up fa-2x"></i>
      </div>
    </div>
  </div>
</body>
</html>
```

### Downloading bootstrap source files

> :warning: It is very important that you donwload **source files** and not compiled files. [This link will take you to the right section of getboostrap.com](https://getbootstrap.com/docs/4.5/getting-started/download/#source-files). The heading should say **Source Files** not compiled whatever. You have been warned.

Now, these come in a nice little `.zip` file. When you open it, you will see a lot of things that might be confusing. We only care about the `scss/` directory (for now). You can delete all the others.

Open the directory, select all the files and click copy. Then go back to your site and paste them into `assets/css/boostrap`. Or drag and drop. Nice.

### Integration: boostrap framework side

Sadly, this isn't a section about calculus. Instead we are integrating the bootstrap stylesheets into our Jekyll website.

Now, Nick Riebeek from experimentingwithcode.com goes about this next step in a different way, so if you don't like how I'm doing it maybe [check that out][9].

In our new `css/boostrap` directory, there is a file called `bootstrap.scss`. This file basically imports all the other components of bootstrap. I like to use this as my `main.scss` file.

The first thing to do is to drag the file outside of `boostrap/` and into `css/`. Now you can open it, and it will look something like this:

```scss
/*!
 * Bootstrap v4.5.3 (https://getbootstrap.com/)
 * Copyright 2011-2020 The Bootstrap Authors
 * Copyright 2011-2020 Twitter, Inc.
 * Licensed under MIT (https://github.com/twbs/bootstrap/blob/main/LICENSE)
 */

@import "functions";
@import "variables";
...
@import "spinners";
@import "utilities";
@import "print";
```

What this is doing is importing all the other files in the `bootstrap/` folder so that they are ready to use. The problem now is, though, that the `bootstrap.scss` file is no longer in the `bootstrap/` directory, so it's looking for these files to be imported somewhere they are not. This has an easy fix, just edit it to have the correct file address:

```scss
@import "bootstrap/functions";
@import "bootstrap/variables";
...
@import "bootstrap/spinners";
@import "bootstrap/utilities";
@import "bootstrap/print";
```
> ðŸ’¡ You need to edit **all** the imports.

This seems super annoying and pointless but it has the advantage that it clearly separates our custom code (we'll come to this) from the bootstrap framework, and they both come together in this one single file. You will see.

We need to make two more changes to this file before it's ready to take over the role of Main.

Firstly, Jekyll requires that the `main.scss` file has with [front matter][10]. All you need to do is add this to the **top** of your file:

```scss
---

---

/*!
 * Bootstrap v4.5.3 (https://getbootstrap.com/)
 * Copyright 2011-2020 The Bootstrap Authors
 * Copyright 2011-2020 Twitter, Inc.
 * Licensed under MIT (https://github.com/twbs/bootstrap/blob/main/LICENSE)
 */

@import ...
```

Now you can delete `main.scss` and rename `bootstrap.scss` to `main.scss`.

> :warning: It is important this is a `.scss` file and not `.css`.

### Integration: Jekyll configuration side

Our site exists within the Jekyll framework so we need to make sure it too knows what's happening. This isn't completely transparent because Jekyll expects a `_sass` directory by default, we just want this to be `assets/css` instead. Update your config file to look like this:

```yml
# Site settings
title: My Very Cool Site
email: me@myverycool.site
author: beep boop I'm a human
description: Welcome to the tutorial site.
url: myverycool.site

# Build settings
permalink: :title/
sass:
  sass_dir: /assets/css/
```
The last step is to link our Index to our stylsheet so it can use it. Simply add
```html
<link rel="stylesheet" href="assets/css/main.css">
```
to the head of the Index file. (Just above the `<title>` tags will work.)

### Ok, but why?

You can `bundle exec jekyll serve` to see what the site looks like now, using the bootstrap defaults.

No one likes defaults though, so we can test out what kinds of changes we can make to this. You will se the "Hello there!" heading in `index.html` comes with a class: `text-primary`. This is one of the (many) classes defined by bootstrap. Now would be a good time to peruse all the files in the `bootstrap` folder to get a better idea of what sorts of things we can do with it.

If you open the `_variables.scss` file you can see all sorts of things are defined in it. A quick search for `primary` finds this:

```scss
$primary:       $blue !default;
$secondary:     $gray-600 !default;
$success:       ...
```

It seems like, if nothing else, we can change the colour of the heading text. So let's try this.

First create your own `_variables.scss` file but this time in the `custom/` directory. You can choose this [colour picker tool][11] to decide on a colour. Don't choose blue though â€“ that's the default, and you won't see any change.

Open your variables file and simply copy the format we've just seen:

```scss
$primary: #997300;
```

That's all you need for that file.

We do need to make sure the boss (`main.scss`) knows about this change, so we need to include this file too. Open it up and import your variables:

```scss
@import "custom/variables";

@import "bootstrap/functions";
@import ... ;
@import "bootstrap/variables";
@import ...
```
**Do not** delete the `bootstrap/variables` file, since this is defining a bunch of other variables we haven't, and you'd lose them completely.

By inclduing your variables file **before** the boostrap one, you are overwriting the variables you have custom defined, but the rest of them will still be used.

If you serve your site once more you should see this colour change ðŸŽ‰

## 3. Javascript

Some of bootstrap's framework depends on jQuery and Popper.js. There's [a very handy list of these dependencies][13] on the Bootstrap website. To make sure it all runs smoothly, it's worth importing them both now.

There's about ten thousand ways to go about this but I'm going to use CDNs. Although I'm interested in having the source code for the bootstrap framework for snooping around and playing with later I'm not too bothered about jQuery or Popper.js so CDNs are a good option.

Both these links can be found on the bootstrap website but you can just copy and paste this

```html
<script src="https://code.jquery.com/jquery-3.5.1.slim.min.js" integrity="sha384-DfXdz2htPH0lsSSs5nCTpuj/zy4C+OGpamoFVy38MVBnE+IbbVYUew+OrCXaRkfj" crossorigin="anonymous"></script>
<script src="https://cdn.jsdelivr.net/npm/popper.js@1.16.1/dist/umd/popper.min.js" integrity="sha384-9/reFTGAW83EW2RDu2S0VKaIzap3H66lZH81PoYlFhbGU+6BZp6G7niu735Sk7lN" crossorigin="anonymous"></script>
```

just above the `<\body>` tag in the Index. Copying and pasting from getboostrap.com instead of the jQuery and Popper.js directly has the added advantage of having `integrity` and `crossorigin` tags. This help verify that the javascript you are importing into your website hasn't been manipulated on the way there.

## 4. Make it Jekyll

Now if you've used the Internet before you will be able to tell this site is not usable. There is nothing going on and it's not exactly clear how you make things happen. We must Jekyllise.

If you feel up to it, this would be a good time to snoop in on how sites you like are doing things. A good one to look through is the [default template minima][12].

In short though, we need some new directories. Jekyll's magic âœ¨ really shines when we have templates (layouts), and snippets (includes) we can reuse to make our posts. We can manually create all of these, but we might as well use the power of the internet and "borrow" the one's from Minima.

You can download these directly from [their Github repo][12]. We only need `_includes` and `_layouts`. We are going to need to rewrite these to make use of the bootstrap framework so don't get too attached to them.

_____

## All links
- [CDNs â€“ Wikpedia][1]
- [How to jekyll step by step][2]
- [Jekyll installation guide][3]
- [Reference tutorial on experimentingwithcode.com][4]
- [Jekyll: converting a gem theme into a regular theme][5]
- [Github Pages][6]
- 


[1]: https://en.wikipedia.org/wiki/Content_delivery_network "CDNs -- Wikipedia"
[2]: https://jekyllrb.com/docs/step-by-step/01-setup/ "How to Jekyll step by step"
[3]: https://jekyllrb.com/docs/installation/ "Jekyll installation guide"
[4]: https://experimentingwithcode.com/creating-a-jekyll-blog-with-bootstrap-4-and-sass-part-1/ "experimentingwithcode.com tutorial"
[5]: https://jekyllrb.com/docs/themes/#converting-gem-based-themes-to-regular-themes "Converting a gem theme into a regular theme"
[6]: https://pages.github.com/ "Github Pages site"
[7]: https://experimentingwithcode.com/creating-a-jekyll-blog-with-bootstrap-4-and-sass-part-1/#throwing-up-some-simple-text
[8]: https://getbootstrap.com/docs/4.5/getting-started/download/#source-files "Download source files"
[9]: https://experimentingwithcode.com/creating-a-jekyll-blog-with-bootstrap-4-and-sass-part-1/#integrating-bootstrap "Alternative integrating bootstrap"
[10]: https://jekyllrb.com/docs/front-matter/ "Jekyll front matter"
[11]: https://www.w3schools.com/colors/colors_picker.asp "Colour picker"
[12]: https://github.com/jekyll/minima "Minima on Github"
[13]: https://getbootstrap.com/docs/4.5/getting-started/introduction/#components "Bootstrap dependencies list"
[14]: https://jquery.com/download/ "jQuery downloads"
